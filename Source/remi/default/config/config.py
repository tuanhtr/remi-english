import jsonimport osfrom .config_common import ColumnDefine, CalculationTypefrom helper.util import GacoiFormFieldType, DbAgentimport datetimefrom helper.importadapter import ImportAdapterclass Config:    """    Load config of import, performance table    """    config = None    @staticmethod    def load_config(reload=True):        """        Load config json file in to memory        @param reload: If false, do not process when config already loaded        @return: Nothing        """        if Config.config is not None and not reload:            return        location = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))        with open(os.path.join(location, 'config.json'), 'r', encoding='utf-8') as f:            Config.config = json.load(f)    @staticmethod    def get_int_value(entry, key, default=0):        """        Get data and convert to int from config info        @param entry: dict        @param key:        @param default:        @return:        """        value = Config.get_value(entry, key, None)        if value is None:            return default        return int(value)    @staticmethod    def get_enum_value(entry, key, enum_class, default=None):        """        Get data and convert to Enum from config info        @type entry: dict        @type key: str        @type enum_class: Enum        @param entry:        @param key:        @param enum_class: Enum class        @param default:        @return:        """        value = Config.get_value(entry, key, default)        if value is None:            return default        return enum_class(value)    @staticmethod    def get_value(entry, key, default=None):        """        Get value with specified key in dict entry        @type entry: dict        @param entry:        @param key:        @param default:        @return:        """        if key not in entry:            return default        return entry[key]    @staticmethod    def none_to_default(value, default=0):        """        Convert none        @param value:        @param default:        @return:        """        if value is None:            return default        return value    @staticmethod    def load_table_config(table, config_name):        """        Load table (cash flow, budget performance) config from config file.        This config is used to show cash flow, budget performance table        @param table: Dict of table config        @param config_name:        @return: Nothing        """        Config.load_config()        table.clear()        configs = Config.config[config_name]        for account_id, entry in configs.items():            account_id = int(account_id)            setting_entry = {                ColumnDefine.Title: Config.get_value(entry, "title"),                ColumnDefine.Depth: Config.get_int_value(entry, "depth"),                ColumnDefine.Parent: Config.get_int_value(entry, "parent"),                ColumnDefine.Account: Config.get_int_value(entry, "account"),                ColumnDefine.Hidden: Config.get_int_value(entry, "hidden"),                ColumnDefine.CalculationType: Config.get_enum_value(entry, "calculation",                                                                    CalculationType, CalculationType.Nothing),            }            if "args" in entry:                setting_entry[ColumnDefine.Argument] = Config.get_value(entry, "args")            table[account_id] = setting_entry    @staticmethod    def load_database_table_config(table, config_name):        """        Load table (cash flow, budget performance) config from database.        This config is used to show cash flow, budget performance table        @param table:        @param config_name:        @return:        """        table.clear()        from default.models.models2 import TableDefinition        rs = TableDefinition.objects.filter(resource_type=config_name).order_by("-depth", "seq")        for rec in rs:            account_id = rec.id            setting_entry = {                ColumnDefine.Title: rec.title,                ColumnDefine.Depth: Config.none_to_default(rec.depth),                ColumnDefine.Parent: Config.none_to_default(rec.parent),                ColumnDefine.Account: Config.none_to_default(rec.account_id),                ColumnDefine.Color: rec.color            }            if rec.color == 'hidden':                setting_entry[ColumnDefine.Hidden] = True            else:                setting_entry[ColumnDefine.Hidden] = False            if rec.calculation_type == 'SUM':                setting_entry[ColumnDefine.CalculationType] = CalculationType.Summary            elif rec.calculation_type == 'SUM_ACCOUNT':                setting_entry[ColumnDefine.CalculationType] = CalculationType.SummaryAccount            elif rec.calculation_type == 'DIFF':                setting_entry[ColumnDefine.CalculationType] = CalculationType.Different            elif rec.calculation_type == 'PRECOLUMN':                setting_entry[ColumnDefine.CalculationType] = CalculationType.PreviousColumn            else:                setting_entry[ColumnDefine.CalculationType] = CalculationType.Nothing            if rec.calculation_args:                setting_entry[ColumnDefine.Argument] = Config._string_to_list(rec.calculation_args)            table[account_id] = setting_entry    @staticmethod    def _string_to_list(string):        """        Convert string like "1,2,3" to list        @param string:        @return:        """        l = string[1: -1].strip().split(",")        ret = list()        for o in l:            ret.append(int(o.strip()))        return ret    @staticmethod    def get_data_import_adapter(config_name):        """        Create import adapter from config info        @param config_name:        @rtype: ImportAdapter        @return: Import adapter        """        Config.load_config()        configs = Config.config[config_name]        if "base_data_name" in configs:            base_data_name = configs["base_data_name"]        else:            base_data_name = None        adapter = ImportAdapter(configs["start_col"], configs["end_col"], configs["start_row"], base_data_name)        if "date_format" in configs:            adapter.date_format = configs["date_format"]        # Col information: index, required, map, type        for col_name, col_info in configs["cols"].items():            if "value" in col_info:                adapter.set_value(col_name, col_info["value"])                continue            col_index = col_info["col_index"]            if col_index > 0:                col_index = col_index - 1            adapter.set_column(col_name, col_index)            if "required" in col_info:                adapter.set_required(col_name, col_info["required"])            if "type" in col_info:                col_type = col_info['type']                if col_type == "number":                    adapter.set_type(col_name, GacoiFormFieldType.Number)                if col_type == "date":                    adapter.set_type(col_name, GacoiFormFieldType.Date)                if col_type == "datetime":                    adapter.set_type(col_name, GacoiFormFieldType.DateTime)            if "account_convert" in col_info:                adapter.set_account_convert(col_name, col_info["account_convert"])            if "max_length" in col_info:                adapter.set_max_length(col_name, col_info["max_length"])            if "title" in col_info:                adapter.set_title(col_name, col_info["title"])            else:                adapter.set_title(col_name, col_name)            if "filters" in col_info:                adapter.set_filters(col_name, col_info["filters"])            if "name_to_code" in col_info:                adapter.set_map(col_name, Config.get_name_to_code_map(col_info["name_to_code"]))            if "name_to_code_query" in col_info:                adapter.set_map(col_name, DbAgent.get_data_map(col_info["name_to_code_query"]))            if "name_to_code_insert_query" in col_info:                adapter.set_insert_query(col_name, col_info["name_to_code_insert_query"])        # Meta        if "meta" in configs:            current_date = datetime.datetime.now().date().strftime('%Y/%m/%d')            current_datetime = datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S')            end_date = "9999/12/31"            for col_name, meta in configs["meta"].items():                meta_type_name = meta["meta_type"]                meta_type_id = DbAgent.get_value("select id from meta_type where meta_type=%s", [meta_type_name])                adapter.set_meta_type_id(col_name, meta_type_id)                adapter.set_meta_type_name(col_name, meta_type_name)                query = "select value,id from meta_info " \                        "where meta_type_id={0} " \                        "and valid_start_date <= '{1}' and " \                        "(valid_end_date is null or valid_end_date >= '{1}')".format(meta_type_id, current_date)                adapter.set_map(col_name, DbAgent.get_data_map(query))                if "auto_insert" in meta and meta["auto_insert"]:                    query = "insert into meta_info (meta_type_id, value, valid_start_date, valid_end_date, " \                            "created_datetime, updated_datetime) values ({0}, %s, '{1}', '{2}', '{3}', '{3}')".\                        format(meta_type_id, current_date, end_date, current_datetime)                    adapter.set_insert_query(col_name, query)        return adapter    @staticmethod    def get_name_to_code_map(map_name):        """        Get map from name to code from config file.        Return None if map_name not exist        @param map_name:        @rtype: dict        @return: Map from name to code dict        """        Config.load_config()        configs = Config.config["name_to_code"]        if map_name not in configs:            return None        configs = configs[map_name]        ret = dict()        for item in configs:            names = item["name"]            code = item["code"]            for name in names:                ret[name] = code        return ret    @staticmethod    def get_code_to_name_map(map_name):        """        Get map from name to code from config file.        Return None if map_name not exist        @param map_name:        @rtype: dict        @return: Map from name to code dict        """        Config.load_config()        configs = Config.config["name_to_code"]        if map_name not in configs:            return None        configs = configs[map_name]        ret = dict()        for item in configs:            names = item["name"]            code = item["code"]            if len(names) > 0:                ret[code] = names[0]        return ret